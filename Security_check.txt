Security checks in Ptmalloc

1.Unlink_chunk
1.1 
if (chunksize (p) != prev_size (next_chunk (p)))
    malloc_printerr ("corrupted size vs. prev_size");

1.2 (smallbin chunk) Check if the chunk to unlink belongs to an doubly linked list
if (__builtin_expect (fd->bk != p || bk->fd != p, 0))
    malloc_printerr ("corrupted double-linked list");

1.3 (largebin chunk) Check if the largebin belongs to an doubly linked list
if (p->fd_nextsize->bk_nextsize != p
	  || p->bk_nextsize->fd_nextsize != p)
	malloc_printerr ("corrupted double-linked list (not small)");

2. _int_free
2.1 Check if the chunk to free is located at an valid address:
(1) The chunk does exceed the bottom address space.
(2) a multiple of MALLOC_ALIGNMENT
-> size > 0
if (__builtin_expect ((uintptr_t) p > (uintptr_t) -size, 0)
     || __builtin_expect (misaligned_chunk (p), 0)) 
    malloc_printerr ("free(): invalid pointer");
2.2 Check if the size of the chunk is valid:
(1) Larger than minimal space.
(2) a multiple of MALLOC_ALIGNMENT
if (__glibc_unlikely (size < MINSIZE || !aligned_OK (size)))
    malloc_printerr ("free(): invalid size");

FASTBIN
2.3 Check if the size of chunk to insert into fastbin is valid.
if (__builtin_expect (chunksize_nomask (chunk_at_offset (p, size))
			  <= 2 * SIZE_SZ, 0)
	|| __builtin_expect (chunksize (chunk_at_offset (p, size))
			     >= av->system_mem, 0))

2.4 Check the first chunk in fastbin is not the current chunk that is to be inserted.
if (__builtin_expect (old == p, 0))
	  malloc_printerr ("double free or corruption (fasttop)");

2.5 Check the size of first chunk in fastbin is the same as the size of the current chunk that is to be inserted.
if (have_lock && old != NULL
	&& __builtin_expect (fastbin_index (chunksize (old)) != idx, 0))
      malloc_printerr ("invalid fastbin entry (free)");

OUT FAST BIN
2.6 Check the chunk to be freed is not the top chunk
if (__glibc_unlikely (p == av->top))
      malloc_printerr ("double free or corruption (top)");

2.7Check the next adjacent chunk is not exceeding the size of current heap.
if (__builtin_expect (contiguous (av)
			  && (char *) nextchunk
			  >= ((char *) av->top + chunksize(av->top)), 0))
	malloc_printerr ("double free or corruption (out)");

2.8 Check the P bit of next adjacent chunk is set.
if (__glibc_unlikely (!prev_inuse(nextchunk)))
     malloc_printerr ("double free or corruption (!prev)");

2.9 Check the size of next adjacent chunk is valid. -> By setting 'av->system_mem' equal to 0xffffffff
if (__builtin_expect (chunksize_nomask (nextchunk) <= 2 * SIZE_SZ, 0)
	|| __builtin_expect (nextsize >= av->system_mem, 0))
      malloc_printerr ("free(): invalid next size (normal)");

2.10
if (__glibc_unlikely (chunksize(p) != prevsize))
        malloc_printerr ("corrupted size vs. prev_size while consolidating");

2.11 When inserting the chunk into the unsorted bin, check if the backward pointer of first chunk in unsorted bin
is poiting to the head of unsorted bin.
if (__glibc_unlikely (fwd->bk != bck))
	malloc_printerr ("free(): corrupted unsorted chunks");